from fastapi import FastAPI, Form
from fastapi.middleware.cors import CORSMiddleware
import mysql.connector

app = FastAPI()

# للسماح للـ HTML من متصفح مختلف
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# الاتصال بقاعدة البيانات
def get_db_connection():
    return mysql.connector.connect(
        host='localhost',
        user='root',
        password='',        # ← غيّر إذا عندك كلمة سر
        database='ratmer'
    )



#====================================================
@app.post("/add-emp")
def add_employee(id: int = Form(0), 
                 name: str = Form(...), 
                 num_T: str = Form(...),
                 data_prth: str = Form(...),
                 address: str = Form(...),
                 Salary: str = Form(...), 
                 Job: str = Form(...), 
                 nots: str = Form(...)):
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        query = "INSERT INTO employee (id, name, num_T, data_prth, address, Salary, Job, nots) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
        cur.execute(query, (id, name, num_T, data_prth, address, Salary, Job, nots))
        conn.commit()
        return {"message": "تمت الإضافة بنجاح ✅"}
    except mysql.connector.Error as e:
        return {"error": str(e)}
#====================================================
@app.post("/add-category")
def add_category(id: int = Form(0), 
                 title: str = Form(...), 
                 address: str = Form(...),
                 q_person: str = Form(...), 
                 ses_work: str = Form(...), 
                 sum_of_proj: str = Form(...), 
                 pers_of_proj: str = Form(...), 
                 n_phone: str = Form(...), 
                 sel_emp: str = Form(...),
                 nots: str = Form(...)):
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        query = "INSERT INTO projuct (id, title, address, q_person, ses_work, sum_of_proj, pers_of_proj, n_phone, sel_emp, nots) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
        cur.execute(query, (id, title, address, q_person, ses_work, sum_of_proj, pers_of_proj, n_phone, sel_emp, nots))
        conn.commit()
        return {"message": "تمت الإضافة بنجاح ✅"}
    except mysql.connector.Error as e:
        return {"error": str(e)}
#====================================================
@app.post("/add-project-guards")
def add_project_guards(id: int = Form(0), 
                 project_id : int = Form(...), 
                 employee_id : int = Form(...),
                 start_date: str = Form(...),
                 end_date: str = Form(...),
                 emp: str = Form(...),  
                 nots: str = Form(...)):
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        query = "INSERT INTO project_guards (id, project_id, employee_id, start_date, end_date, emp, nots) VALUES (%s, %s, %s, %s, %s, %s, %s)"
        cur.execute(query, (id, project_id, employee_id, start_date, end_date, emp, nots))
        conn.commit()
        return {"message": "تمت الإضافة بنجاح ✅"}
    except mysql.connector.Error as e:
        return {"error": str(e)}
#====================================================

@app.get("/get-product-by-name/")
def get_product_by_name(title: str):
    try:
        conn = get_db_connection()
        cur = conn.cursor(dictionary=True)
        cur.execute("SELECT * FROM projuct WHERE title = %s", (title,))
        row = cur.fetchone()
        cur.close()
        conn.close()

        if row:
            return row
        else:
            return {}
    except mysql.connector.Error as e:
        return {"error": str(e)}
#====================================================

@app.get("/get-guards-by-name/")
def get_guards_by_name(Ename: str):
    try:
        conn = get_db_connection()
        cur = conn.cursor(dictionary=True)
        cur.execute("SELECT * FROM employee WHERE name = %s", (Ename,))
        row = cur.fetchone()
        cur.close()
        conn.close()

        if row:
            return row
        else:
            return {}
    except mysql.connector.Error as e:
        return {"error": str(e)}
#====================================================

@app.get("/get-categories")
def get_categories():
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT name FROM employee")  # أو اسم العمود اللي تريده
        rows = cur.fetchall()
        category = [row[0] for row in rows]
        return {"category": category}
    except mysql.connector.Error as e:
        return {"error": str(e)}
#====================================================
@app.get("/get-categories/")
def get_categories():
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT name FROM employee")
        rows = cur.fetchall()
        cur.close()
        conn.close()
        categories = [row[0] for row in rows]
        return categories
    except mysql.connector.Error as e:
        return {"error": str(e)}
#====================================================
@app.get("/get-products/")
def get_products():
    conn = get_db_connection()
    cur = conn.cursor(dictionary=True)
    cur.execute("SELECT id, name, num_T, Salary FROM employee")
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows



#===============================================
#uvicorn main:app --reload
#uvicorn main:app --host 127.0.0.1 --port 8001
# in link add /docs
